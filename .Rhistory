FUN = function(x) VaR_ES_forecast(data_zoo = x,
var_spec = var_spec_est,
mean_spec = mean_spec_est,
dist_spec = dist_spec_est,
tolerance_lvl = tolerance_lvl),
align = 'right',
coredata = FALSE)
rolling_VaR_ES_lead <- stats::lag(rolling_VaR_ES, k = -1)
rolling_VaR_ES_df <- as.data.frame(rolling_VaR_ES_lead)
rolling_VaR_ES_df <- rolling_VaR_ES_df %>%
mutate(Date = as.Date(rownames(rolling_VaR_ES_df)))
VaR_ES_results_df <- inner_join(garchsimlation_df, rolling_VaR_ES_df, by = 'Date')
# Filter for shortfalls
shortfall_df <- VaR_ES_results_df %>%
filter(Return <= VaR) %>%
mutate(shortfall = Return - ES)
# Simple Mincer regression
mincer_reg_simple <- lm(formula = shortfall ~ 1, data = shortfall_df)
mincer_res_robust_simple <- coeftest(mincer_reg_simple, vcov = vcovHC(mincer_reg_simple, type = "HC1"))
p_value_simple <- mincer_res_robust_simple[4]
# Mincer regression with variance(t-1)
mincer_reg_var <- lm(formula = shortfall ~ variance_t_min_1, data = shortfall_df)
mincer_res_robust_var <- coeftest(mincer_reg_var, vcov = vcovHC(mincer_reg_var, type = "HC1"))
p_value_var <- mincer_res_robust_var[7]
# Save test decisions
result_lst[['simple']][['p0_01']] <- ifelse(p_value_simple <= 0.01, 1, 0)
result_lst[['simple']][['p0_05']] <- ifelse(p_value_simple <= 0.05, 1, 0)
result_lst[['simple']][['p0_1']] <- ifelse(p_value_simple <= 0.1, 1, 0)
result_lst[['var']][['p0_01']] <- ifelse(p_value_var <= 0.01, 1, 0)
result_lst[['var']][['p0_05']] <- ifelse(p_value_var <= 0.05, 1, 0)
result_lst[['var']][['p0_1']] <- ifelse(p_value_var <= 0.1, 1, 0)
result_lst
}
return(result)
}
result_size_par<- estimation_loop_par(n_loop=10,
est_window=est_window,
oos_window=200,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
omega=omega_size,
alpha1=alpha1_size,
beta1=beta1_size,
eta11=eta11_size,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
cores=3)
# install.packages('foreach')
# install.packages('doParallel')
# Initial cleaning
rm(list = ls())
if (dev.cur() != 1) {
dev.off()
}
cat('\14')
library(foreach)
library(doParallel)
registerDoParallel(cores = 7)
list_tst <- list()
res <- foreach(i=1:100) %dopar% {
print(i)
x <- i
y <- i
z <- x+y
list_tst$t1 <- z
list_tst$t2 <- y
list_tst
}
estimation_loop_par <- function(n_loop,
est_window,
oos_window,
tolerance_lvl,
var_spec_sim,
mean_spec_sim,
dist_spec_sim,
omega,
alpha1,
beta1,
eta11,
var_spec_est,
mean_spec_est,
dist_spec_est,
cores){
# Register cores
registerDoParallel(cores = cores)
# Invoke empty result list
result_lst <- list()
# Estimation loop
result <- foreach(i=1:n_loop) %dopar% {
cat(paste0('Iteration Nr.: ', i, '\n'))
# Simulate garch process
garchspec_sim <- ugarchspec(variance.model = var_spec_sim,
mean.model = mean_spec_sim,
distribution.model = dist_spec_sim,
fixed.pars = list(mu = 0,
omega = omega,
alpha1 = alpha1,
beta1 = beta1,
eta11 = eta11))
garchsimlation <- ugarchpath(spec = garchspec_sim,
n.sim = est_window + oos_window,
n.start = 0,
m.sim = 1)
# Create zoo object of simulation
garchsimlation_df <- as.data.frame(garchsimlation@path$seriesSim)
garchsimlation_df <- garchsimlation_df %>%
mutate(Date = as.Date('2000-01-01') + 1:nrow(garchsimlation_df)) %>%
rename(Return = V1)
garchsimulation_zoo <- zoo(garchsimlation_df$Return, garchsimlation_df$Date)
# Calculate GARCH model
rolling_VaR_ES <- rollapply(garchsimulation_zoo,
width = est_window,
FUN = function(x) VaR_ES_forecast(data_zoo = x,
var_spec = var_spec_est,
mean_spec = mean_spec_est,
dist_spec = dist_spec_est,
tolerance_lvl = tolerance_lvl),
align = 'right',
coredata = FALSE)
rolling_VaR_ES_lead <- stats::lag(rolling_VaR_ES, k = -1)
rolling_VaR_ES_df <- as.data.frame(rolling_VaR_ES_lead)
rolling_VaR_ES_df <- rolling_VaR_ES_df %>%
mutate(Date = as.Date(rownames(rolling_VaR_ES_df)))
VaR_ES_results_df <- inner_join(garchsimlation_df, rolling_VaR_ES_df, by = 'Date')
# Filter for shortfalls
shortfall_df <- VaR_ES_results_df %>%
filter(Return <= VaR) %>%
mutate(shortfall = Return - ES)
# Simple Mincer regression
mincer_reg_simple <- lm(formula = shortfall ~ 1, data = shortfall_df)
mincer_res_robust_simple <- coeftest(mincer_reg_simple, vcov = vcovHC(mincer_reg_simple, type = "HC1"))
p_value_simple <- mincer_res_robust_simple[4]
# Mincer regression with variance(t-1)
mincer_reg_var <- lm(formula = shortfall ~ variance_t_min_1, data = shortfall_df)
mincer_res_robust_var <- coeftest(mincer_reg_var, vcov = vcovHC(mincer_reg_var, type = "HC1"))
p_value_var <- mincer_res_robust_var[7]
# Save test decisions
result_lst[['simple']][['p0_01']] <- ifelse(p_value_simple <= 0.01, 1, 0)
result_lst[['simple']][['p0_05']] <- ifelse(p_value_simple <= 0.05, 1, 0)
result_lst[['simple']][['p0_1']] <- ifelse(p_value_simple <= 0.1, 1, 0)
result_lst[['var']][['p0_01']] <- ifelse(p_value_var <= 0.01, 1, 0)
result_lst[['var']][['p0_05']] <- ifelse(p_value_var <= 0.05, 1, 0)
result_lst[['var']][['p0_1']] <- ifelse(p_value_var <= 0.1, 1, 0)
result_lst
}
return(result)
}
result_size_par<- estimation_loop_par(n_loop=10,
est_window=est_window,
oos_window=200,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
omega=omega_size,
alpha1=alpha1_size,
beta1=beta1_size,
eta11=eta11_size,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
cores=3)
# install.packages('foreach')
# install.packages('doParallel')
# Initial cleaning
rm(list = ls())
if (dev.cur() != 1) {
dev.off()
}
cat('\14')
# install.packages('foreach')
# install.packages('doParallel')
# Initial cleaning
rm(list = ls())
if (dev.cur() != 1) {
dev.off()
}
cat('\14')
library(foreach)
library(doParallel)
registerDoParallel(cores = 7)
list_tst <- list()
res <- foreach(i=1:100) %dopar% {
print(i)
x <- i
y <- i
z <- x+y
list_tst$t1 <- z
list_tst$t2 <- y
list_tst
}
estimation_loop_par <- function(n_loop,
est_window,
oos_window,
tolerance_lvl,
var_spec_sim,
mean_spec_sim,
dist_spec_sim,
omega,
alpha1,
beta1,
eta11,
var_spec_est,
mean_spec_est,
dist_spec_est,
cores){
# Register cores
registerDoParallel(cores = cores)
# Invoke empty result list
result_lst <- list()
# Estimation loop
result <- foreach(i=1:n_loop) %dopar% {
cat(paste0('Iteration Nr.: ', i, '\n'))
# Simulate garch process
garchspec_sim <- ugarchspec(variance.model = var_spec_sim,
mean.model = mean_spec_sim,
distribution.model = dist_spec_sim,
fixed.pars = list(mu = 0,
omega = omega,
alpha1 = alpha1,
beta1 = beta1,
eta11 = eta11))
garchsimlation <- ugarchpath(spec = garchspec_sim,
n.sim = est_window + oos_window,
n.start = 0,
m.sim = 1)
# Create zoo object of simulation
garchsimlation_df <- as.data.frame(garchsimlation@path$seriesSim)
garchsimlation_df <- garchsimlation_df %>%
mutate(Date = as.Date('2000-01-01') + 1:nrow(garchsimlation_df)) %>%
rename(Return = V1)
garchsimulation_zoo <- zoo(garchsimlation_df$Return, garchsimlation_df$Date)
# Calculate GARCH model
rolling_VaR_ES <- rollapply(garchsimulation_zoo,
width = est_window,
FUN = function(x) VaR_ES_forecast(data_zoo = x,
var_spec = var_spec_est,
mean_spec = mean_spec_est,
dist_spec = dist_spec_est,
tolerance_lvl = tolerance_lvl),
align = 'right',
coredata = FALSE)
rolling_VaR_ES_lead <- stats::lag(rolling_VaR_ES, k = -1)
rolling_VaR_ES_df <- as.data.frame(rolling_VaR_ES_lead)
rolling_VaR_ES_df <- rolling_VaR_ES_df %>%
mutate(Date = as.Date(rownames(rolling_VaR_ES_df)))
VaR_ES_results_df <- inner_join(garchsimlation_df, rolling_VaR_ES_df, by = 'Date')
# Filter for shortfalls
shortfall_df <- VaR_ES_results_df %>%
filter(Return <= VaR) %>%
mutate(shortfall = Return - ES)
# Simple Mincer regression
mincer_reg_simple <- lm(formula = shortfall ~ 1, data = shortfall_df)
mincer_res_robust_simple <- coeftest(mincer_reg_simple, vcov = vcovHC(mincer_reg_simple, type = "HC1"))
p_value_simple <- mincer_res_robust_simple[4]
# Mincer regression with variance(t-1)
mincer_reg_var <- lm(formula = shortfall ~ variance_t_min_1, data = shortfall_df)
mincer_res_robust_var <- coeftest(mincer_reg_var, vcov = vcovHC(mincer_reg_var, type = "HC1"))
p_value_var <- mincer_res_robust_var[7]
# Save test decisions
result_lst[['simple']][['p0_01']] <- ifelse(p_value_simple <= 0.01, 1, 0)
result_lst[['simple']][['p0_05']] <- ifelse(p_value_simple <= 0.05, 1, 0)
result_lst[['simple']][['p0_1']] <- ifelse(p_value_simple <= 0.1, 1, 0)
result_lst[['var']][['p0_01']] <- ifelse(p_value_var <= 0.01, 1, 0)
result_lst[['var']][['p0_05']] <- ifelse(p_value_var <= 0.05, 1, 0)
result_lst[['var']][['p0_1']] <- ifelse(p_value_var <= 0.1, 1, 0)
result_lst
}
return(result)
}
result_size_par<- estimation_loop_par(n_loop=10,
est_window=est_window,
oos_window=200,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
omega=omega_size,
alpha1=alpha1_size,
beta1=beta1_size,
eta11=eta11_size,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
cores=3)
# install.packages('foreach')
# install.packages('doParallel')
# Initial cleaning
rm(list = ls())
if (dev.cur() != 1) {
dev.off()
}
cat('\14')
library(foreach)
library(doParallel)
# registerDoParallel(cores = 7)
# list_tst <- list()
# res <- foreach(i=1:100) %dopar% {
#   print(i)
#   x <- i
#   y <- i
#   z <- x+y
#   list_tst$t1 <- z
#   list_tst$t2 <- y
#   list_tst
# }
estimation_loop_par <- function(n_loop,
est_window,
oos_window,
tolerance_lvl,
var_spec_sim,
mean_spec_sim,
dist_spec_sim,
omega,
alpha1,
beta1,
eta11,
var_spec_est,
mean_spec_est,
dist_spec_est,
cores){
# Register cores
registerDoParallel(cores = cores)
# Invoke empty result list
result_lst <- list()
# Estimation loop
result <- foreach(i=1:n_loop) %dopar% {
cat(paste0('Iteration Nr.: ', i, '\n'))
# Simulate garch process
garchspec_sim <- ugarchspec(variance.model = var_spec_sim,
mean.model = mean_spec_sim,
distribution.model = dist_spec_sim,
fixed.pars = list(mu = 0,
omega = omega,
alpha1 = alpha1,
beta1 = beta1,
eta11 = eta11))
garchsimlation <- ugarchpath(spec = garchspec_sim,
n.sim = est_window + oos_window,
n.start = 0,
m.sim = 1)
# Create zoo object of simulation
garchsimlation_df <- as.data.frame(garchsimlation@path$seriesSim)
garchsimlation_df <- garchsimlation_df %>%
mutate(Date = as.Date('2000-01-01') + 1:nrow(garchsimlation_df)) %>%
rename(Return = V1)
garchsimulation_zoo <- zoo(garchsimlation_df$Return, garchsimlation_df$Date)
# Calculate GARCH model
rolling_VaR_ES <- rollapply(garchsimulation_zoo,
width = est_window,
FUN = function(x) VaR_ES_forecast(data_zoo = x,
var_spec = var_spec_est,
mean_spec = mean_spec_est,
dist_spec = dist_spec_est,
tolerance_lvl = tolerance_lvl),
align = 'right',
coredata = FALSE)
rolling_VaR_ES_lead <- stats::lag(rolling_VaR_ES, k = -1)
rolling_VaR_ES_df <- as.data.frame(rolling_VaR_ES_lead)
rolling_VaR_ES_df <- rolling_VaR_ES_df %>%
mutate(Date = as.Date(rownames(rolling_VaR_ES_df)))
VaR_ES_results_df <- inner_join(garchsimlation_df, rolling_VaR_ES_df, by = 'Date')
# Filter for shortfalls
shortfall_df <- VaR_ES_results_df %>%
filter(Return <= VaR) %>%
mutate(shortfall = Return - ES)
# Simple Mincer regression
mincer_reg_simple <- lm(formula = shortfall ~ 1, data = shortfall_df)
mincer_res_robust_simple <- coeftest(mincer_reg_simple, vcov = vcovHC(mincer_reg_simple, type = "HC1"))
p_value_simple <- mincer_res_robust_simple[4]
# Mincer regression with variance(t-1)
mincer_reg_var <- lm(formula = shortfall ~ variance_t_min_1, data = shortfall_df)
mincer_res_robust_var <- coeftest(mincer_reg_var, vcov = vcovHC(mincer_reg_var, type = "HC1"))
p_value_var <- mincer_res_robust_var[7]
# Save test decisions
result_lst[['simple']][['p0_01']] <- ifelse(p_value_simple <= 0.01, 1, 0)
result_lst[['simple']][['p0_05']] <- ifelse(p_value_simple <= 0.05, 1, 0)
result_lst[['simple']][['p0_1']] <- ifelse(p_value_simple <= 0.1, 1, 0)
result_lst[['var']][['p0_01']] <- ifelse(p_value_var <= 0.01, 1, 0)
result_lst[['var']][['p0_05']] <- ifelse(p_value_var <= 0.05, 1, 0)
result_lst[['var']][['p0_1']] <- ifelse(p_value_var <= 0.1, 1, 0)
result_lst
}
return(result)
}
result_size_par<- estimation_loop_par(n_loop=10,
est_window=est_window,
oos_window=200,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
omega=omega_size,
alpha1=alpha1_size,
beta1=beta1_size,
eta11=eta11_size,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
cores=3)
result_size_par<- estimation_loop_par(n_loop=10,
est_window=est_window,
oos_window=200,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
omega=omega_size,
alpha1=alpha1_size,
beta1=beta1_size,
eta11=eta11_size,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
cores=3)
estimation_loop_par <- function(n_loop,
est_window,
oos_window,
tolerance_lvl,
var_spec_sim,
mean_spec_sim,
dist_spec_sim,
omega,
alpha1,
beta1,
eta11,
var_spec_est,
mean_spec_est,
dist_spec_est,
cores){
# Register cores
registerDoParallel(cores = cores)
# Invoke empty result list
result_lst <- list()
# Estimation loop
result <- foreach(i=1:n_loop) %dopar% {
cat(paste0('Iteration Nr.: ', i, '\n'))
# Simulate garch process
garchspec_sim <- ugarchspec(variance.model = var_spec_sim,
mean.model = mean_spec_sim,
distribution.model = dist_spec_sim,
fixed.pars = list(mu = 0,
omega = omega,
alpha1 = alpha1,
beta1 = beta1,
eta11 = eta11))
garchsimlation <- ugarchpath(spec = garchspec_sim,
n.sim = est_window + oos_window,
n.start = 0,
m.sim = 1)
# Create zoo object of simulation
garchsimlation_df <- as.data.frame(garchsimlation@path$seriesSim)
garchsimlation_df <- garchsimlation_df %>%
mutate(Date = as.Date('2000-01-01') + 1:nrow(garchsimlation_df)) %>%
rename(Return = V1)
garchsimulation_zoo <- zoo(garchsimlation_df$Return, garchsimlation_df$Date)
# Calculate GARCH model
rolling_VaR_ES <- rollapply(garchsimulation_zoo,
width = est_window,
FUN = function(x) VaR_ES_forecast(data_zoo = x,
var_spec = var_spec_est,
mean_spec = mean_spec_est,
dist_spec = dist_spec_est,
tolerance_lvl = tolerance_lvl),
align = 'right',
coredata = FALSE)
rolling_VaR_ES_lead <- stats::lag(rolling_VaR_ES, k = -1)
rolling_VaR_ES_df <- as.data.frame(rolling_VaR_ES_lead)
rolling_VaR_ES_df <- rolling_VaR_ES_df %>%
mutate(Date = as.Date(rownames(rolling_VaR_ES_df)))
VaR_ES_results_df <- inner_join(garchsimlation_df, rolling_VaR_ES_df, by = 'Date')
# Filter for shortfalls
shortfall_df <- VaR_ES_results_df %>%
filter(Return <= VaR) %>%
mutate(shortfall = Return - ES)
# Simple Mincer regression
mincer_reg_simple <- lm(formula = shortfall ~ 1, data = shortfall_df)
mincer_res_robust_simple <- coeftest(mincer_reg_simple, vcov = vcovHC(mincer_reg_simple, type = "HC1"))
p_value_simple <- mincer_res_robust_simple[4]
# Mincer regression with variance(t-1)
mincer_reg_var <- lm(formula = shortfall ~ variance_t_min_1, data = shortfall_df)
mincer_res_robust_var <- coeftest(mincer_reg_var, vcov = vcovHC(mincer_reg_var, type = "HC1"))
p_value_var <- mincer_res_robust_var[7]
# Save test decisions
result_lst[['simple']][['p0_01']] <- ifelse(p_value_simple <= 0.01, 1, 0)
result_lst[['simple']][['p0_05']] <- ifelse(p_value_simple <= 0.05, 1, 0)
result_lst[['simple']][['p0_1']] <- ifelse(p_value_simple <= 0.1, 1, 0)
result_lst[['var']][['p0_01']] <- ifelse(p_value_var <= 0.01, 1, 0)
result_lst[['var']][['p0_05']] <- ifelse(p_value_var <= 0.05, 1, 0)
result_lst[['var']][['p0_1']] <- ifelse(p_value_var <= 0.1, 1, 0)
result_lst
}
return(result)
}
result_size_par<- estimation_loop_par(n_loop=10,
est_window=est_window,
oos_window=200,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
omega=omega_size,
alpha1=alpha1_size,
beta1=beta1_size,
eta11=eta11_size,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
cores=4)
