# Simulation specifications
var_spec_sim_power_4 = list(model = 'gjrGARCH', garchOrder = c(1, 1))
mean_spec_sim_power_4 = list(armaOrder = c(0,0))
dist_spec_sim_power_4 = 'std'
fixed_pars_sim_power_4 = list(mu = 0,
omega = omega_power_4,
alpha1 = alpha1_power_4,
beta1 = beta1_power_4,
gamma1 = gamma1_power_4,
shape = shape_power_4)
# Estimation parameters
var_spec_est_power_4 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_est_power_4 = mean_spec_sim_power_4
dist_spec_est_power_4 = 'norm'
###################################################
########### Power loop 5 parameters ###############
###################################################
# Simulation functional parameter
omega_power_5 = 0.005
alpha1_power_5 = 0.01
beta1_power_5 = 0.94
gamma1_power_5 = 0.08
shape_power_5 = 4
# Simulation specifications
var_spec_sim_power_5 = list(model = 'gjrGARCH', garchOrder = c(1, 1))
mean_spec_sim_power_5 = list(armaOrder = c(0,0))
dist_spec_sim_power_5 = 'std'
fixed_pars_sim_power_5 = list(mu = 0,
omega = omega_power_5,
alpha1 = alpha1_power_5,
beta1 = beta1_power_5,
gamma1 = gamma1_power_5,
shape = shape_power_5)
# Estimation parameters
var_spec_est_power_5 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_est_power_5 = mean_spec_sim_power_5
dist_spec_est_power_5 = 'norm'
##############TEST
###################################################
########### Power loop 6 parameters ###############
###################################################
# Simulation functional parameter
omega_power_6 = 0.005
alpha1_power_6 = 0.05
beta1_power_6 = 0.94
shape_power_6 = 6
# Simulation specifications
var_spec_sim_power_6 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_sim_power_6 = list(armaOrder = c(0,0))
dist_spec_sim_power_6 = 'std'
fixed_pars_sim_power_6 = list(mu = 0,
omega = omega_power_6,
alpha1 = alpha1_power_6,
beta1 = beta1_power_6,
shape = shape_power_6)
# Estimation parameters
var_spec_est_power_6 = var_spec_sim_power_6
mean_spec_est_power_6 = mean_spec_sim_power_6
dist_spec_est_power_6 = 'norm'
###################################################
########### Power loop 7 parameters ###############
###################################################
# Simulation functional parameter
omega_power_7 = 0.005
alpha1_power_7 = 0.05
beta1_power_7 = 0.94
shape_power_7 = 30
# Simulation specifications
var_spec_sim_power_7 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_sim_power_7 = list(armaOrder = c(0,0))
dist_spec_sim_power_7 = 'std'
fixed_pars_sim_power_7 = list(mu = 0,
omega = omega_power_7,
alpha1 = alpha1_power_7,
beta1 = beta1_power_7,
shape = shape_power_7)
# Estimation parameters
var_spec_est_power_7 = var_spec_sim_power_7
mean_spec_est_power_7 = mean_spec_sim_power_7
dist_spec_est_power_7 = 'norm'
###################################################
########### Power loop 8 parameters ###############
###################################################
# Simulation functional parameter
omega_power_8 = 0.005
alpha1_power_8 = 0.05
beta1_power_8 = 0.94
shape_power_8 = 100
# Simulation specifications
var_spec_sim_power_8 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_sim_power_8 = list(armaOrder = c(0,0))
dist_spec_sim_power_8 = 'std'
fixed_pars_sim_power_8 = list(mu = 0,
omega = omega_power_8,
alpha1 = alpha1_power_8,
beta1 = beta1_power_8,
shape = shape_power_8)
# Estimation parameters
var_spec_est_power_8 = var_spec_sim_power_8
mean_spec_est_power_8 = mean_spec_sim_power_8
dist_spec_est_power_8 = 'norm'
###################################################
########### Size loop 2 parameters ###############
###################################################
# Simulation functional parameter
omega_size_2 = 0.005
alpha1_size_2 = 0.05
beta1_size_2 = 0.94
shape_size_2 = 4
# Simulation specifications
var_spec_sim_size_2 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_sim_size_2 = list(armaOrder = c(0,0))
dist_spec_sim_size_2 = 'std'
fixed_pars_sim_size_2 = list(mu = 0,
omega = omega_size_2,
alpha1 = alpha1_size_2,
beta1 = beta1_size_2,
shape = shape_size_2)
# Estimation parameters
var_spec_est_size_2 = var_spec_sim_size_2
mean_spec_est_size_2 = mean_spec_sim_size_2
dist_spec_est_size_2 = dist_spec_sim_size_2
###########################################################
########### Mincer Regression Specifications ##############
###########################################################
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
# variance_return = list(formula = Return ~ variance_t_min_1 + ES,
#                        h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
# residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
#                             h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0')),
# indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
#                                 h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1')),
residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0'))#,
# residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
#                              h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
# full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
#                       h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
#                    h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1'))
)
# Size loops without estimated parameters
for(wa in white_adjust){
result_size_fix_wa <- estimation_loop_par(n_loop=n_loop_fix,
est_window=est_window,
oos_window=oos_window_fix,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
fixed_pars_sim=fixed_pars_sim_size,
estimate=FALSE,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
fixed_pars_est=fixed_pars_sim_size,
cores=cores,
white_adjust=wa,
seed=seed,
mincer_spec=mincer_spec,
execute_uc=TRUE)
result_size_fix_wa_matrix <- create_result_matrix(result_size_fix_wa)
assign(paste0('result_size_fix_', wa), result_size_fix_wa)
assign(paste0('result_size_fix_', wa, '_matrix'), result_size_fix_wa_matrix)
#write_results_to_txt(name = paste0('result_size_fix_', wa), txt_file = result_txt_file)
}
rm(result_size_fix_wa, wa, result_size_fix_wa_matrix)
result_size_fix_hc3_matrix
m <- matrix(data = 1:9, nrow = 3)
m
nrow(m)
res_str <- paste0('matrix(nrow = ,'nrow(m), ', ncol = ', ncol(m), 'byrow = FALSE', 'data = c(')
res_str <- paste0('matrix(nrow = ,',nrow(m), ', ncol = ', ncol(m), 'byrow = FALSE', 'data = c(')
res_str
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(')
res_str
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(')
for(r in 1:nrow(m)){
for(c in 1:ncol(m)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
matrix_to_string(m)
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(')
for(r in 1:nrow(m)){
for(c in 1:ncol(m)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
return(res_str)
}
matrix_to_string(m)
m
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
res_str
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(r in 1:nrow(m)){
for(c in 1:ncol(m)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
return(res_str)
}
matrix_to_string(m)
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
return(res_str)
}
matrix_to_string(m)
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(c!=1 & r!=1){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
return(res_str)
}
matrix_to_string(m)
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(!(c=1 & r=1)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
return(res_str)
}
matrix_to_string(m)
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(!(c==1 & r==1)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
return(res_str)
}
matrix_to_string(m)
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(!(c==1 & r==1)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
res_str <- paste0(res_str, ')')
return(res_str)
}
matrix_to_string(m)
m_res <- matrix_to_string(m)
m_res
parse(m_res)
eval(parse(text = m_res))
matrix_to_string <- function(m){
res_str <- paste0('matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(!(c==1 & r==1)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
res_str <- paste0(res_str, '))')
return(res_str)
}
m_res <- matrix_to_string(m)
m_res
parse(m_res)
eval(parse(m_res))
m_res
matrix(nrow = 3, ncol = 3, byrow = FALSE, data = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
# A string containing R code
code_string <- "x <- 5 + 3"
# Parse and evaluate it
eval(parse(text = code_string))
# Now x exists and has a value
print(x)  # Output: 8
matrix_to_string <- function(m){
res_str <- paste0('m_res <- matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(!(c==1 & r==1)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
res_str <- paste0(res_str, '))')
return(res_str)
}
m_res <- matrix_to_string(m)
m_res
eval(parse(m_res))
m <- matrix(data = 1:9, nrow = 3)
matrix_to_string <- function(m){
res_str <- paste0('m_res <- matrix(nrow = ',nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE', ', data = c(', m[1,1])
for(c in 1:ncol(m)){
for(r in 1:nrow(m)){
if(!(c==1 & r==1)){
res_str <- paste0(res_str, ', ', m[r,c])
}
}
}
res_str <- paste0(res_str, '))')
return(res_str)
}
as.vector(m)
matrix_to_string <- function(m) {
res_str <- paste0(
'm_res <- matrix(nrow = ', nrow(m),
', ncol = ', ncol(m),
', byrow = FALSE, data = c('
)
# Flatten matrix in column-major order (default in R)
elements <- as.vector(m)
res_str <- paste0(res_str, paste(elements, collapse = ", "), '))')
return(res_str)
}
m_res <- matrix_to_string(m)
m_res
m <- matrix(data = 1:9, nrow = 3)
matrix_to_string <- function(m) {
res_str <- paste0(
'matrix(nrow = ', nrow(m),
', ncol = ', ncol(m),
', byrow = FALSE, data = c('
)
# Flatten matrix in column-major order (default in R)
elements <- as.vector(m)
res_str <- paste0(res_str, paste(elements, collapse = ", "), '))')
return(res_str)
}
m_res <- matrix_to_string(m)
m_res
# Generate the code string
m_code <- matrix_to_string(m)
# Evaluate the string as code
m_res <- eval(parse(text = m_code))
# Now m_res is a matrix
print(m_res)
m <- matrix(data = 1:16, nrow = 4)
matrix_to_string <- function(m) {
res_str <- paste0(
'matrix(nrow = ', nrow(m),
', ncol = ', ncol(m),
', byrow = FALSE, data = c('
)
# Flatten matrix in column-major order (default in R)
elements <- as.vector(m)
res_str <- paste0(res_str, paste(elements, collapse = ", "), '))')
return(res_str)
}
# Generate the code string
m_code <- matrix_to_string(m)
# Evaluate the string as code
m_res <- eval(parse(text = m_code))
# Now m_res is a matrix
m
m_res
m <- matrix(data = c(1:16)/45, nrow = 4)
matrix_to_string <- function(m) {
res_str <- paste0(
'matrix(nrow = ', nrow(m),
', ncol = ', ncol(m),
', byrow = FALSE, data = c('
)
# Flatten matrix in column-major order (default in R)
elements <- as.vector(m)
res_str <- paste0(res_str, paste(elements, collapse = ", "), '))')
return(res_str)
}
# Generate the code string
m_code <- matrix_to_string(m)
# Evaluate the string as code
m_res <- eval(parse(text = m_code))
# Now m_res is a matrix
m
m_res
vector_to_string <- function(v){
res_vec(paste0('c(', paste(elements, collapse = ", "), ')'))
return(res_vec)
}
vector_to_string(c(1,2,3,4,5))
vector_to_string <- function(v){
res_vec(paste0('c(', paste(elements, collapse = ", "), ')'))
return(res_vec)
}
vector_to_string(c(1,2,3,4,5))
vector_to_string <- function(v){
res_vec <- paste0('c(', paste(v, collapse = ", "), ')')
return(res_vec)
}
vector_to_string(c(1,2,3,4,5))
vector_to_string <- function(v){
res_vec <- paste0('c(', paste(v, collapse = ", "), ')')
return(res_vec)
}
v <- c(1,2,3,4)
v_code <- vector_to_string(v)
v_res <- (eval(parse(text = v)))
v
v_res
v <- c(1,2,3,4)
v_code <- vector_to_string(v)
v_res <- (eval(parse(text = code)))
v <- c(1,2,3,4)
v_code <- vector_to_string(v)
v_res <- (eval(parse(text = v_code)))
v
v_res
v_code
matrix_to_string <- function(m) {
res_str <- paste0('matrix(nrow = ', nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE, data = c(')
elements <- as.vector(m)
res_str <- paste0(res_str, paste(elements, collapse = ", "), '))')
return(res_str)
}
vector_to_string <- function(v){
res_vec <- paste0('c(', paste(v, collapse = ", "), ')')
return(res_vec)
}
eval_string_code <- function(str_code){
str_res <- eval(parse(text = str_code))
return(str_res)
}
m <- m <- matrix(data = 1:36, nrow = 6)
m <- matrix(data = 1:36, nrow = 6)
m_code <- matrix_to_string(m)
m_res <- eval_string_code(m_code)
m==m_res
m
m_res
m_code
v <- 1:36
v_code <- vector_to_string(v)
v_res <- eval_string_code(v_code)
v==v_res
v_code
v_res
# Functions
matrix_to_string <- function(m) {
res_str <- paste0('matrix(nrow = ', nrow(m), ', ncol = ', ncol(m), ', byrow = FALSE, data = c(')
elements <- as.vector(m)
res_str <- paste0(res_str, paste(elements, collapse = ", "), '))')
return(res_str)
}
vector_to_string <- function(v){
res_vec <- paste0('c(', paste(v, collapse = ", "), ')')
return(res_vec)
}
eval_string_code <- function(str_code){
str_res <- eval(parse(text = str_code))
return(str_res)
}
# Usage examples
m <- matrix(data = 1:36, nrow = 6)
m_code <- matrix_to_string(m)
m_res <- eval_string_code(m_code)
m==m_res
v <- 1:36
v_code <- vector_to_string(v)
v_res <- eval_string_code(v_code)
v==v_res
df <- data.frame(r = c(1,2,3,4), v = c(v_res,v_res,v_res,v_res), m = c(m_res,m_res,m_res,m_res))
View(df)
v_res
df <- data.frame(r = c(1,2,3,4), v = c(v_code,v_code,v_code,v_code), m = c(m_code,m_code,m_code,m_code))
View(df)
v <- 1:10000
v_code <- vector_to_string(v)
v_res <- eval_string_code(v_code)
v==v_res
df <- data.frame(r = c(1,2,3,4), v = c(v_code,v_code,v_code,v_code), m = c(m_code,m_code,m_code,m_code))
View(df)
eval_string_code(df$v[[1]])
df_zoo <- as.zoo(df)
df_zoo
as.Date('2000-01-01') + c(1,2,3,4)
df_zoo <- zoo(df, as.Date('2000-01-01') + c(1,2,3,4))
as.Date('2000-01-01') + 0:3
df_zoo <- zoo(df, as.Date('2000-01-01') + 0:3)
df_zoo
df_zoo$r$1
df_zoo$m[[1]]
eval_string_code(df_zoo$m[[1]])
eval_string_code(df_zoo$v[[1]])
