###########################################################
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
# variance_return = list(formula = Return ~ variance_t_min_1 + ES,
#                        h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
# residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
#                             h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
# residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
#                                 h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
#                              h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
# full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
#                       h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
#                    h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0'))#,
# indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
#                                 h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1'))
)
##########################################
########### Loop execution ###############
##########################################
#TESTTTT
source('functions_before_new_test.R')
result_size_fix <- estimation_loop_par(n_loop=n_loop_fix,
est_window=est_window,
oos_window=oos_window_fix,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
fixed_pars_sim=fixed_pars_sim_size,
estimate=FALSE,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
fixed_pars_est=fixed_pars_sim_size,
cores=cores,
white_adjust=white_adjust,
seed=seed,
mincer_spec=mincer_spec)
result_size_fix_matrix <- create_result_matrix(result_size_fix)
result_size_fix_matrix
# Initial cleaning
rm(list = ls())
if (dev.cur() != 1) {
dev.off()
}
cat('\14')
# Load libraries
#install.packages('rugarch')
#install.packages('tidyverse')
#install.packages('zoo')
#install.packages('sandwich')
#install.packages('lmtest')
#install.packages('foreach')
#install.packages('doParallel')
#install.packages('car')
#install.packages('progressr')
#library(progressr)
library(rugarch)
library(tidyverse)
library(zoo)
library(sandwich)
library(lmtest)
library(foreach)
library(doParallel)
library(car)
source('functions.R')
#############################################
########### Global parameters ###############
#############################################
tolerance_lvl = 0.05
n_loop_est = 1000
n_loop_fix = 1000
oos_window_est = 5000
oos_window_fix = 10000
est_window = 750
white_adjust = 'hc3'
cores = 3
seed = 78
################################################
########### Size loop parameters ###############
################################################
# Simulation functional parameter
omega_size = 0.005
alpha1_size = 0.05
beta1_size = 0.94
# Simulation specifications
var_spec_sim_size = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_sim_size = list(armaOrder = c(0,0))
dist_spec_sim_size = 'norm'
fixed_pars_sim_size = list(mu = 0,
omega = omega_size,
alpha1 = alpha1_size,
beta1 = beta1_size)
# Estimation parameters
var_spec_est_size = var_spec_sim_size
mean_spec_est_size = mean_spec_sim_size
dist_spec_est_size = dist_spec_sim_size
###################################################
########### Power loop 1 parameters ###############
###################################################
# Simulation functional parameter
omega_power_1 = 0.005
alpha1_power_1 = 0.02
beta1_power_1 = 0.94
gamma1_power_1 = 0.06
# Simulation specifications
var_spec_sim_power_1 = list(model = 'gjrGARCH', garchOrder = c(1, 1))
mean_spec_sim_power_1 = list(armaOrder = c(0,0))
dist_spec_sim_power_1 = 'norm'
fixed_pars_sim_power_1 = list(mu = 0,
omega = omega_power_1,
alpha1 = alpha1_power_1,
beta1 = beta1_power_1,
gamma1 = gamma1_power_1)
# Estimation parameters
var_spec_est_power_1 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_est_power_1 = mean_spec_sim_power_1
dist_spec_est_power_1 = dist_spec_sim_power_1
###################################################
########### Power loop 2 parameters ###############
###################################################
# Simulation functional parameter
omega_power_2 = 0.005
alpha1_power_2 = 0.01
beta1_power_2 = 0.94
gamma1_power_2 = 0.08
# Simulation specifications
var_spec_sim_power_2 = list(model = 'gjrGARCH', garchOrder = c(1, 1))
mean_spec_sim_power_2 = list(armaOrder = c(0,0))
dist_spec_sim_power_2 = 'norm'
fixed_pars_sim_power_2 = list(mu = 0,
omega = omega_power_2,
alpha1 = alpha1_power_2,
beta1 = beta1_power_2,
gamma1 = gamma1_power_2)
# Estimation parameters
var_spec_est_power_2 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_est_power_2 = mean_spec_sim_power_2
dist_spec_est_power_2 = dist_spec_sim_power_2
###########################################################
########### Mincer Regression Specifications ##############
###########################################################
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
# variance_return = list(formula = Return ~ variance_t_min_1 + ES,
#                        h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
# residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
#                             h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
# residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
#                                 h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
#                              h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
# full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
#                       h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
#                    h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0'))#,
# indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
#                                 h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1'))
)
##########################################
########### Loop execution ###############
##########################################
# Size loop without estimated parameters
result_size_fix <- estimation_loop_par(n_loop=n_loop_fix,
est_window=est_window,
oos_window=oos_window_fix,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
fixed_pars_sim=fixed_pars_sim_size,
estimate=FALSE,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
fixed_pars_est=fixed_pars_sim_size,
cores=cores,
white_adjust=white_adjust,
seed=seed,
mincer_spec=mincer_spec,
execute_uc=TRUE)
result_size_fix_matrix <- create_result_matrix(result_size_fix)
#TESTTTT
source('functions_before_new_test.R')
result_size_fix1 <- estimation_loop_par(n_loop=n_loop_fix,
est_window=est_window,
oos_window=oos_window_fix,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_size,
mean_spec_sim=mean_spec_sim_size,
dist_spec_sim=dist_spec_sim_size,
fixed_pars_sim=fixed_pars_sim_size,
estimate=FALSE,
var_spec_est=var_spec_est_size,
mean_spec_est=mean_spec_est_size,
dist_spec_est=dist_spec_est_size,
fixed_pars_est=fixed_pars_sim_size,
cores=cores,
white_adjust=white_adjust,
seed=seed,
mincer_spec=mincer_spec)
result_size_fix_matrix1 <- create_result_matrix(result_size_fix1)
#TESTTTT
result_size_fix_matrix1
result_size_fix_matrix
source('functions.R')
# Power loop 2 without estimated parameters
result_power_2_fix <- estimation_loop_par(n_loop=n_loop_fix,
est_window=est_window,
oos_window=oos_window_fix,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_power_2,
mean_spec_sim=mean_spec_sim_power_2,
dist_spec_sim=dist_spec_sim_power_2,
fixed_pars_sim=fixed_pars_sim_power_2,
estimate=FALSE,
var_spec_est=var_spec_est_power_2,
mean_spec_est=mean_spec_est_power_2,
dist_spec_est=dist_spec_est_power_2,
fixed_pars_est=fixed_pars_sim_size,
cores=cores,
white_adjust=white_adjust,
seed=seed,
mincer_spec=mincer_spec,
execute_uc=TRUE)
result_power_2_fix_matrix <- create_result_matrix(result_power_2_fix)
result_power_2_fix_matrix
result_size_fix_matrix
mean(result_size_fix$n_obs_mincer)
mean(result_power_2_fix$n_obs_mincer)
hist(result_size_fix$UC$p)
hist(result_power_2_fix$UC$p)
result_power_2_fix$indicator_lower_0_shortfall$p
hist(result_power_2_fix$indicator_lower_0_shortfall$p)
hist(result_size_fix$indicator_lower_0_shortfall$p)
hist(result_power_2_fix$simple_shortfall$p)
hist(result_power_2_fix$simple_return$p)
hist(result_size_fix$simple_shortfall$p)
saveRDS(result_size_fix, file = 'results/result_size_fix_with_UC.RData')
saveRDS(result_power_2_fix, file = 'results/result_power_2_fix_with_UC.RData)
NULL
)
))
NULL
'
)
saveRDS(result_power_2_fix, file = 'results/result_power_2_fix_with_UC.RData')
source('functions.R')
#############################################
########### Global parameters ###############
#############################################
tolerance_lvl = 0.05
n_loop_est = 1000
n_loop_fix = 1000
oos_window_est = 5000
oos_window_fix = 10000
est_window = 750
white_adjust = 'hc3'
cores = 3
seed = 78
################################################
########### Size loop parameters ###############
################################################
# Simulation functional parameter
omega_size = 0.005
alpha1_size = 0.05
beta1_size = 0.94
# Simulation specifications
var_spec_sim_size = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_sim_size = list(armaOrder = c(0,0))
dist_spec_sim_size = 'norm'
fixed_pars_sim_size = list(mu = 0,
omega = omega_size,
alpha1 = alpha1_size,
beta1 = beta1_size)
# Estimation parameters
var_spec_est_size = var_spec_sim_size
mean_spec_est_size = mean_spec_sim_size
dist_spec_est_size = dist_spec_sim_size
###################################################
########### Power loop 1 parameters ###############
###################################################
# Simulation functional parameter
omega_power_1 = 0.005
alpha1_power_1 = 0.02
beta1_power_1 = 0.94
gamma1_power_1 = 0.06
# Simulation specifications
var_spec_sim_power_1 = list(model = 'gjrGARCH', garchOrder = c(1, 1))
mean_spec_sim_power_1 = list(armaOrder = c(0,0))
dist_spec_sim_power_1 = 'norm'
fixed_pars_sim_power_1 = list(mu = 0,
omega = omega_power_1,
alpha1 = alpha1_power_1,
beta1 = beta1_power_1,
gamma1 = gamma1_power_1)
# Estimation parameters
var_spec_est_power_1 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_est_power_1 = mean_spec_sim_power_1
dist_spec_est_power_1 = dist_spec_sim_power_1
###################################################
########### Power loop 2 parameters ###############
###################################################
# Simulation functional parameter
omega_power_2 = 0.005
alpha1_power_2 = 0.01
beta1_power_2 = 0.94
gamma1_power_2 = 0.08
# Simulation specifications
var_spec_sim_power_2 = list(model = 'gjrGARCH', garchOrder = c(1, 1))
mean_spec_sim_power_2 = list(armaOrder = c(0,0))
dist_spec_sim_power_2 = 'norm'
fixed_pars_sim_power_2 = list(mu = 0,
omega = omega_power_2,
alpha1 = alpha1_power_2,
beta1 = beta1_power_2,
gamma1 = gamma1_power_2)
# Estimation parameters
var_spec_est_power_2 = list(model = 'sGARCH',garchOrder = c(1,1))
mean_spec_est_power_2 = mean_spec_sim_power_2
dist_spec_est_power_2 = dist_spec_sim_power_2
###########################################################
########### Mincer Regression Specifications ##############
###########################################################
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
# variance_return = list(formula = Return ~ variance_t_min_1 + ES,
#                        h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
# residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
#                             h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
# residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
#                                 h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
#                              h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
# full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
#                       h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
#                    h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0'))#,
# indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
#                                 h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1'))
)
result_power_1_fix <- estimation_loop_par(n_loop=n_loop_fix,
est_window=est_window,
oos_window=oos_window_fix,
tolerance_lvl=tolerance_lvl,
var_spec_sim=var_spec_sim_power_1,
mean_spec_sim=mean_spec_sim_power_1,
dist_spec_sim=dist_spec_sim_power_1,
fixed_pars_sim=fixed_pars_sim_power_1,
estimate=FALSE,
var_spec_est=var_spec_est_power_1,
mean_spec_est=mean_spec_est_power_1,
dist_spec_est=dist_spec_est_power_1,
fixed_pars_est=fixed_pars_sim_size,
cores=cores,
white_adjust=white_adjust,
seed=seed,
mincer_spec=mincer_spec,
execute_uc=TRUE)
result_power_1_fix_matrix <- create_result_matrix(result_power_1_fix)
result_power_1_fix_matrix
mean(result_power_1_fix$n_obs_mincer)
saveRDS(result_power_1_fix, file = 'results/result_power_1_fix_with_UC.RData')
load("~/Library/CloudStorage/OneDrive-Personal/01Studium/01Göttingen/Publish_BA/mincer_regression_test/results/result_power_1_fix_with_UC.RData")
test <- readRDS
test <- readRDS('results/result_power_1_fix_with_UC.RData')
test$UC$p
hist(test$UC$p)
?qdist()
library(rugarch)
library(tidyverse)
library(zoo)
library(sandwich)
library(lmtest)
library(foreach)
library(doParallel)
library(car)
?stats::lead()
?stats::lag()
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
variance_return = list(formula = Return ~ variance_t_min_1 + ES,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0'))
indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
variance_return = list(formula = Return ~ variance_t_min_1 + ES,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0'))
indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
variance_return = list(formula = Return ~ variance_t_min_1 + ES,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0')),
indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1')),
residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1'))
)
mincer_spec
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
# variance_return = list(formula = Return ~ variance_t_min_1 + ES,
#                        h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
# residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
#                             h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0')),
# indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
#                                 h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1')),
residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
#                              h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
# full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
#                       h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
#                    h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1'))
)
mincer_spec <- list(simple_shortfall = list(formula = shortfall ~ 1,
h0 = c('(Intercept) = 0')),
simple_return = list(formula = Return ~ ES,
h0 = c('(Intercept) = 0', 'ES = 1')),
variance_shortfall = list(formula = shortfall ~ variance_t_min_1,
h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0')),
# variance_return = list(formula = Return ~ variance_t_min_1 + ES,
#                        h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1')),
residual_sqrt_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0')),
# residual_sqrt_return = list(formula = Return ~ residual_t_min_1_quadr + ES,
#                             h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1')),
indicator_lower_0_shortfall = list(formula = shortfall ~ indicator_residual_lower_0,
h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0')),
# indicator_lower_0_return = list(formula = Return ~ indicator_residual_lower_0 + ES,
#                                 h0 = c('(Intercept) = 0', 'indicator_residual_lower_0 = 0', 'ES = 1')),
residual_sqrt0_shortfall = list(formula = shortfall ~ residual_t_min_1_quadr_lower_0,
h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0'))#,
# residual_sqrt0_return = list(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES,
#                              h0 = c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1')),
# full_shortfall = list(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0,
#                       h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0')),
# full_return = list(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES,
#                    h0 = c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1'))
)
mincer_spec$residual_sqrt0_shortfall$formula
