####################################################################
################### Function calculates VaR and ES #################
####################################################################
VaR_ES_forecast <- function(data_zoo,
                            var_spec,
                            mean_spec,
                            dist_spec,
                            tolerance_lvl){
  
  # Store last date
  last_date <- tail(index(data_zoo), 1)
  
  # GARCH Specification
  garchspec <- ugarchspec(variance.model = var_spec,
                          mean.model = mean_spec,
                          distribution.model = dist_spec)
  
  # Fitting GARCH model
  garchfit <- tryCatch(
    {
      ugarchfit(spec = garchspec,
                data = data_zoo,
                solver = 'hybrid')
    }, error = function(e){
      return(NA)
    }
  )
  
  if(suppressWarnings(!is.na(garchfit))){
    
    # Extracting coefficients
    coef_fit <- coef(garchfit)
    
    # Extracting variance from fit
    variance_t_min_1 <- tail(sigma(garchfit), 1) ^ 2
    
    # Extracting last residual from fit
    residual_t_min_1 <- tail(residuals(garchfit), 1)
    
    # Extracting skewness, shape and lambda parameter (if not prevalent, NA gets assigned)
    skew <- ifelse('skew' %in% names(coef_fit),
                   coef_fit['skew'],
                   NA)
    shape <- ifelse('shape' %in% names(coef_fit),
                    coef_fit['shape'],
                    NA)
    lambda <- ifelse('ghlambda' %in% names(coef_fit),
                     coef_fit['ghlambda'],
                     NA)
    
    # Forecasting
    garchforecast <- ugarchforecast(fitORspec = garchfit,
                                    n.ahead = 1)
    
    # Extracting mu and sigma
    mu <- fitted(garchforecast)
    sigma <- sigma(garchforecast)
    
    # Function returns pth quantile of current distribution
    pth_quantile <- function(p) {
      q <- qdist(distribution = dist_spec,
                 p = p,
                 skew = skew,
                 shape = shape,
                 lambda = lambda)
      return(q)
    }
    
    # Calculate VaR
    VaR <- mu + sigma * pth_quantile(p = tolerance_lvl)
    
    # Calculate ES
    integrated <- integrate(pth_quantile,
                            lower = 0,
                            upper = tolerance_lvl)
    integrated_value <- integrated[['value']]
    ES <- mu + sigma / tolerance_lvl * integrated_value
    
    # Return results
    results <- data.frame(last_date = last_date,
                          sigma = as.double(sigma),
                          variance = as.double(sigma^2),
                          variance_t_min_1 = as.double(variance_t_min_1),
                          residual_t_min_1 = as.double(residual_t_min_1),
                          residual_t_min_1_quadr = as.double(residual_t_min_1)^2,
                          VaR = as.double(VaR),
                          ES = as.double(ES))
  } else {
    results <- data.frame(last_date = last_date,
                          sigma = NA,
                          variance = NA,
                          variance_t_min_1 = NA,
                          residual_t_min_1 = NA,
                          residual_t_min_1_quadr = NA,
                          VaR = NA,
                          ES = NA)
  }
  
  results_zoo <- zoo(results[, -1], order.by = results$last_date)
  return(results_zoo)
}

#############################################################################
################### Parallel estimation Loop ################################
#############################################################################
estimation_loop_par <- function(n_loop,
                                est_window,
                                oos_window,
                                tolerance_lvl,
                                var_spec_sim,
                                mean_spec_sim,
                                dist_spec_sim,
                                omega,
                                alpha1,
                                beta1,
                                eta11,
                                var_spec_est,
                                mean_spec_est,
                                dist_spec_est,
                                cores,
                                white_adjust){
  
  # Register cores
  registerDoParallel(cores = cores)
  
  # Invoke empty result list
  # result_lst <- list()
  
  # Estimation loop
  result_foreach <- foreach(i=1:n_loop) %dopar% {
    
    # Only displayed if cores=1
    cat(paste0('Iteration Nr.: ', i, '\n'))
    
    # Simulate garch process
    garchspec_sim <- ugarchspec(variance.model = var_spec_sim,
                                mean.model = mean_spec_sim,
                                distribution.model = dist_spec_sim,
                                fixed.pars = list(mu = 0,
                                                  omega = omega,
                                                  alpha1 = alpha1,
                                                  beta1 = beta1,
                                                  eta11 = eta11))
    
    garchsimlation <- ugarchpath(spec = garchspec_sim,
                                 n.sim = est_window + oos_window,
                                 n.start = 0,
                                 m.sim = 1)
    
    # Create zoo object of simulation
    garchsimlation_df <- as.data.frame(garchsimlation@path$seriesSim)
    garchsimlation_df <- garchsimlation_df %>%
      mutate(Date = as.Date('2000-01-01') + 1:nrow(garchsimlation_df)) %>%
      rename(Return = V1)
    garchsimulation_zoo <- zoo(garchsimlation_df$Return, garchsimlation_df$Date)
    
    # Calculate GARCH model
    rolling_VaR_ES <- rollapply(garchsimulation_zoo,
                                width = est_window,
                                FUN = function(x) VaR_ES_forecast(data_zoo = x,
                                                                  var_spec = var_spec_est,
                                                                  mean_spec = mean_spec_est,
                                                                  dist_spec = dist_spec_est,
                                                                  tolerance_lvl = tolerance_lvl),
                                align = 'right',
                                coredata = FALSE)
    
    rolling_VaR_ES_lead <- stats::lag(rolling_VaR_ES, k = -1)
    
    rolling_VaR_ES_df <- as.data.frame(rolling_VaR_ES_lead)
    rolling_VaR_ES_df <- rolling_VaR_ES_df %>%
      mutate(Date = as.Date(rownames(rolling_VaR_ES_df)))
    
    VaR_ES_results_df <- inner_join(garchsimlation_df, rolling_VaR_ES_df, by = 'Date')
    
    # Filter for shortfalls
    shortfall_df <- VaR_ES_results_df %>%
      filter(Return <= VaR) %>%
      mutate(shortfall = Return - ES) %>%
      mutate(residual_t_min_1_quadr_lower_0 = ifelse(residual_t_min_1 < 0, residual_t_min_1_quadr, 0))
    
    # 1. Simple Mincer regression with shortfall
    mincer_reg <- lm(formula = shortfall ~ 1, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0'), white.adjust = white_adjust)
    p_value_1 <- mincer_reg_result$'Pr(>F)'[2]
    # 2. Simple Mincer regression with return
    mincer_reg <- lm(formula = Return ~ ES, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'ES = 1'), white.adjust = white_adjust)
    p_value_2 <- mincer_reg_result$'Pr(>F)'[2]
    
    
    # 3. Variance Mincer regression with shortfall
    mincer_reg <- lm(formula = shortfall ~ variance_t_min_1, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'variance_t_min_1 = 0'), white.adjust = white_adjust)
    p_value_3 <- mincer_reg_result$'Pr(>F)'[2]
    # 4. Variance Mincer regression with return
    mincer_reg <- lm(formula = Return ~ variance_t_min_1 + ES, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'variance_t_min_1 = 0', 'ES = 1'), white.adjust = white_adjust)
    p_value_4 <- mincer_reg_result$'Pr(>F)'[2]
    
    
    # 5. Residual^2 Mincer regression with shortfall
    mincer_reg <- lm(formula = shortfall ~ residual_t_min_1_quadr, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'residual_t_min_1_quadr = 0'), white.adjust = white_adjust)
    p_value_5 <- mincer_reg_result$'Pr(>F)'[2]
    # 6. Residual^2 Mincer regression with return
    mincer_reg <- lm(formula = Return ~ residual_t_min_1_quadr + ES, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'residual_t_min_1_quadr = 0', 'ES = 1'), white.adjust = white_adjust)
    p_value_6 <- mincer_reg_result$'Pr(>F)'[2]

    
    # 7. Residual^2 lower 0 Mincer regression with shortfall
    mincer_reg <- lm(formula = shortfall ~ residual_t_min_1_quadr_lower_0, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0'), white.adjust = white_adjust)
    p_value_7 <- mincer_reg_result$'Pr(>F)'[2]
    # 8. Residual^2 lower 0 Mincer regression with return
    mincer_reg <- lm(formula = Return ~ residual_t_min_1_quadr_lower_0 + ES, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1'), white.adjust = white_adjust)
    p_value_8 <- mincer_reg_result$'Pr(>F)'[2]
    
    
    # 9. Full Mincer regression with shortfall
    mincer_reg <- lm(formula = shortfall ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0'), white.adjust = white_adjust)
    p_value_9 <- mincer_reg_result$'Pr(>F)'[2]
    # 10. Full Mincer regression with return
    mincer_reg <- lm(formula = Return ~ variance_t_min_1 + residual_t_min_1_quadr + residual_t_min_1_quadr_lower_0 + ES, data = shortfall_df)
    mincer_reg_result <- linearHypothesis(mincer_reg, c('(Intercept) = 0', 'variance_t_min_1 = 0', 'residual_t_min_1_quadr = 0', 'residual_t_min_1_quadr_lower_0 = 0', 'ES = 1'), white.adjust = white_adjust)
    p_value_10 <- mincer_reg_result$'Pr(>F)'[2]
    
    # Maybe add coefficients in this way: coef_var <- as.double(coef(mincer_reg)['variance_t_min_1'])
    
    # Save results
    result_lst <- list()
    result_lst_names <- c('simple_shortfall', 'simple_return',
                          'variance_shortfall', 'variance_return',
                          'residual_sqrt_shortfall', 'residual_sqrt_return',
                          'residual_sqrt0_shortfall', 'residual_sqrt0_return',
                          'full_shortfall', 'full_return')
    for(i in 1:10){
      p_value <- get(paste0('p_value_', i))
      result_lst[[result_lst_names[i]]][['p']] <- p_value
      result_lst[[result_lst_names[i]]][['p0_01']] <- ifelse(p_value <= 0.01, 1, 0)
      result_lst[[result_lst_names[i]]][['p0_05']] <- ifelse(p_value <= 0.05, 1, 0)
      result_lst[[result_lst_names[i]]][['p0_1']] <- ifelse(p_value <= 0.1, 1, 0)
    }
    result_lst
  }
  
  # Organize results
  result <- list(simple_shortfall = list(p = vector(),
                                         p0_01 = vector(),
                                         p0_05 = vector(),
                                         p0_1 = vector()),
                 simple_return = list(p = vector(),
                                      p0_01 = vector(),
                                      p0_05 = vector(),
                                      p0_1 = vector()),
                 variance_shortfall = list(p = vector(),
                                           p0_01 = vector(),
                                           p0_05 = vector(),
                                           p0_1 = vector()),
                 variance_return = list(p = vector(),
                                        p0_01 = vector(),
                                        p0_05 = vector(),
                                        p0_1 = vector()),
                 residual_sqrt_shortfall = list(p = vector(),
                                                p0_01 = vector(),
                                                p0_05 = vector(),
                                                p0_1 = vector()),
                 residual_sqrt_return = list(p = vector(),
                                             p0_01 = vector(),
                                             p0_05 = vector(),
                                             p0_1 = vector()),
                 residual_sqrt0_shortfall = list(p = vector(),
                                                 p0_01 = vector(),
                                                 p0_05 = vector(),
                                                 p0_1 = vector()),
                 residual_sqrt0_return = list(p = vector(),
                                              p0_01 = vector(),
                                              p0_05 = vector(),
                                              p0_1 = vector()),
                 full_shortfall = list(p = vector(),
                                       p0_01 = vector(),
                                       p0_05 = vector(),
                                       p0_1 = vector()),
                 full_return = list(p = vector(),
                                    p0_01 = vector(),
                                    p0_05 = vector(),
                                    p0_1 = vector())
                 )
  for(i in 1:n_loop){
    for(method in names(result_foreach[[i]])){
      for(metrix in names(result_foreach[[i]][[method]])){
        result[[method]][[metrix]] <- c(result[[method]][[metrix]], result_foreach[[i]][[method]][[metrix]])
      }
    }
  }
  return(result)
}

